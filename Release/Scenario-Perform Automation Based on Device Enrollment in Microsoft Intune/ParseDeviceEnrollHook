#ParseDeviceEnrollHook is the for a Azure Function App that converts an Azure Monitor Common Alert Schema for Log Analytics,
# and converts the query results into a format that we can actually use in LogicApps.
# Sample input: https://github.com/ramseygr/DemoScripts/blob/master/Release/Scenario-Perform%20Automation%20Based%20on%20Device%20Enrollment%20in%20Microsoft%20Intune/Sample%20Azure%20Monitor%20Common%20Alert%20Schema%20-%20Log%20Analytics
# Sample output: https://github.com/ramseygr/DemoScripts/blob/master/Release/Scenario-Perform%20Automation%20Based%20on%20Device%20Enrollment%20in%20Microsoft%20Intune/Sample%20Result%20of%20ParseDeviceHook%20Azure%20Function%20App

using namespace System.Net

# Input bindings are passed in via param block.
param($Request, $TriggerMetadata)

# Write to the Azure Functions log stream.
Write-Host "PowerShell HTTP trigger function processed a request."

# Interact with query parameters or the body of the request.

#Take the  information from Azure Common Alert Schema for Log Analytics, 
# and get the query results into a format we can actually use
$columns = $Request.body.data.alertContext.SearchResults.tables.columns.name
$rows = $Request.body.data.alertContext.SearchResults.tables.rows

#Set name-value pairs for each Search Result
$arr = @()

if ($Request.body.data.alertContext.ResultCount -eq 1) {
    $hash = @{}

    for ($i = 0; $i -lt $columns.count; $i++)
    { 
        $hash.Add($columns[$i],$rows[$i])
    }
    $arr += $hash
}


else {
$rows | foreach {
$hash = @{}

for ($i = 0; $i -lt $columns.count; $i++)
    { 
        $hash.Add($columns[$i],$_[$i])
    }
        $arr += $hash
    }
}

#Ensure we have an array of the results, and convert to JSON
$arrResults = ConvertTo-Json @($arr) -Compress

if ($arrResults) {
    $status = [HttpStatusCode]::OK
    $body = $arrResults
}
else {
    $status = [HttpStatusCode]::BadRequest
    $body = "No Data."
}

# Associate values to output bindings by calling 'Push-OutputBinding'.
Push-OutputBinding -Name Response -Value ([HttpResponseContext]@{
    StatusCode = $status
    Body = $body
})
